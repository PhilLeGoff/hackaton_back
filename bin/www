#!/usr/bin/env node

import { createServer } from "http";
import debugLib from "debug";
import app from "../app.js"; // ✅ Import app.js
import { Server } from "socket.io";

const debug = debugLib("back-hackaton:server");

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTP & WebSocket Server.
 */
const server = createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

/**
 * Attach io instance to requests
 */
app.set("io", io);

/**
 * Listen on the provided port.
 */
server.listen(port, () => {
  console.log(`🚀 Server running on http://localhost:${port}`);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * --- SOCKET.IO IMPLEMENTATION ---
 */
let onlineUsers = new Map();

io.on("connection", (socket) => {
  console.log("🟢 A user connected:", socket.id);

  socket.on("user_connected", (userId) => {
    onlineUsers.set(userId, socket.id);
    console.log(`✅ User ${userId} is online`);
  });

  socket.on("notify", ({ userId, type, tweetId }) => {
    const recipientSocketId = onlineUsers.get(userId);
    if (recipientSocketId) {
      io.to(recipientSocketId).emit("notification", { type, tweetId });
    }
  });

  socket.on("disconnect", () => {
    for (let [key, value] of onlineUsers.entries()) {
      if (value === socket.id) {
        onlineUsers.delete(key);
        console.log(`❌ User ${key} disconnected`);
      }
    }
  });
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") throw error;
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log(`🚀 Server is running on ${bind}`);
}
